name: Build Docker images
run-name: Build Docker images for ${{ inputs.version }}

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'RavenDB Version'
        required: true
        type: string
      docker_user:
        description: 'DockerHub username'
        required: false
        type: string
        default: ravendb

env:
  IS_NIGHTLY: ${{ contains(inputs.version, 'nightly') }}
  DOCKER_USER: ${{ inputs.docker_user }}
  DOCKER_REPO: '${{ inputs.docker_user }}/ravendb'

jobs:
  linux:
    strategy:
      matrix:
        arch: [ x64, arm32v7, arm64v8 ]
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Get ravendb majorminor version & set repo
        run: |
          v=$(echo ${{ inputs.version }} | cut -d. -f1,2)
          echo "RAVEN_MAJOR_MINOR=$v" >> $GITHUB_ENV
          [[ ${{ env.IS_NIGHTLY }} == true ]] && DOCKER_REPO="$DOCKER_REPO-nightly"
          echo "DOCKER_REPO=$DOCKER_REPO" >> $GITHUB_ENV

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to docker
        run: |
          docker login -u ${{ env.DOCKER_USER }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}

      - uses: actions/checkout@v3
        with:
          repository: 'ravendb/ravendb'
          ref: "v${{ env.RAVEN_MAJOR_MINOR }}"

      - name: Download tar package
        run: |
          case "${{ matrix.arch }}" in
            "arm32v7")
              downloadURL="https://daily-builds.s3.amazonaws.com/RavenDB-${{ inputs.version }}-raspberry-pi.tar.bz2"
              ;;
            "arm64v8")
              downloadURL="https://daily-builds.s3.amazonaws.com/RavenDB-${{ inputs.version }}-linux-arm64.tar.bz2"
              ;;

            "x64")
              downloadURL="https://daily-builds.s3.amazonaws.com/RavenDB-${{ inputs.version }}-linux-x64.tar.bz2"
              ;;
            *)
              echo "Unsupported architecture"
              exit 1
              ;;
          esac
          mkdir artifacts
          wget -P "artifacts" "$downloadURL"

      - name: Build deb package
        run: |
          case "${{ matrix.arch }}" in
            "arm32v7")
              arch="armhf"
              ;;
            "arm64v8")
              arch="arm64"
              ;;
            "x64")
              arch="amd64"
              ;;
            *)
              echo "Unsupported architecture"
              exit 1
              ;;
          esac
          source ./set-ubuntu-$(lsb_release -cs).sh
          source ./set-raven-platform-${arch}.sh
          OUTPUT_DIR=$(readlink -e "../../../../docker/ravendb-ubuntu")
          export OUTPUT_DIR
          echo "DEB_OUTPUT_DIR=$OUTPUT_DIR" >> $GITHUB_ENV
          ./build-deb.sh
          me=$(whoami)
          sudo chown ${me}:${me} $OUTPUT_DIR/$(lsb_release -rs)/*.deb
          sudo chmod a+rw $OUTPUT_DIR/$(lsb_release -rs)/*.deb
          mv -v $OUTPUT_DIR/$(lsb_release -rs)/*.deb $OUTPUT_DIR/
        working-directory: scripts/linux/pkg/deb
        env:
          RAVENDB_VERSION: ${{ inputs.version }}

      - name: Upload deb package to artficats
        uses: actions/upload-artifact@v3
        with:
          name: deb-packages
          path: ${{ env.DEB_OUTPUT_DIR }}/ravendb*.deb

      - name: Build image
        run: |
          pwsh build-ubuntu.ps1 -Repo $DOCKER_REPO -Arch ${{ matrix.arch }}
        working-directory: docker

      - name: Publish package
        run: |
          pwsh publish-ubuntu.ps1 -Repo $DOCKER_REPO -Arch ${{ matrix.arch }}
          docker logout
        working-directory: docker

  windowsDockerImageBuilder:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.create.outputs.matrix }}
    steps:
      - name: Create Matrix
        id: create
        run: |
          v=$(echo ${{ inputs.version }} | cut -d. -f1,2)
          if [[ "$v" < "5.4" ]]; then
            echo "matrix=[ { \"os\": \"2019\", \"winVer\": \"1809\"} ]" >> "$GITHUB_OUTPUT"
          else
            echo "matrix=[ { \"os\": \"2019\", \"winVer\": \"1809\"}, { \"os\": \"2022\", \"winVer\": \"ltsc2022\"} ]" >> "$GITHUB_OUTPUT"
          fi

  windows:
    needs: windowsDockerImageBuilder
    strategy:
      matrix:
        data: ${{ fromJson(needs.windowsDockerImageBuilder.outputs.matrix) }}
      fail-fast: false
    runs-on: windows-${{ matrix.data.os }}
    steps:
      - name: Get ravendb majorminor version & set repo
        shell: bash
        run: |
          v=$(echo ${{ inputs.version }} | cut -d. -f1,2)
          echo "RAVEN_MAJOR_MINOR=$v" >> $GITHUB_ENV
          [[ ${{ env.IS_NIGHTLY }} == true ]] && DOCKER_REPO="$DOCKER_REPO-nightly"
          echo "DOCKER_REPO=$DOCKER_REPO" >> $GITHUB_ENV

      - name: Login to docker
        shell: pwsh
        run: |
          docker login -u ${{ env.DOCKER_USER }} -p ${{ secrets.DOCKER_HUB_PASSWORD }}

      - uses: actions/checkout@v3
        with:
          repository: 'ravendb/ravendb'
          ref: "v${{ env.RAVEN_MAJOR_MINOR }}"

      - name: Download package
        shell: pwsh
        run: |
          $downloadURL="https://daily-builds.s3.amazonaws.com/RavenDB-${{ inputs.version }}-windows-x64.zip"
          mkdir artifacts
          Invoke-WebRequest -Uri "$downloadURL" -OutFile "artifacts\RavenDB-${{ inputs.version }}-windows-x64.zip"

      - name: Build image
        shell: pwsh
        run: |
          & .\build-nanoserver.ps1 -Repo ${{ env.DOCKER_REPO }} -WinVer ${{ matrix.data.winVer }}
        working-directory: docker

      - name: Publish package
        shell: pwsh
        run: |
          & .\publish-nanoserver.ps1 -Repo ${{ env.DOCKER_REPO }} -WinVer ${{ matrix.data.winVer }}
          docker logout
        working-directory: docker
