name: Build DEB package
on:
  workflow_call:
    inputs:
      version:
        type: string
        required: true
      github_repository:
        type: string
        required: true
        default: ravendb/ravendb
      is_nightly:
        type: boolean
        required: true
      is_stable:
        type: boolean
        required: true
      raven_major_minor:
        type: string
        required: true
      dotnet_major_version:
        type: number
        required: true
        default: 8
      dry_run:
        type: string
        required: false
        default: ''

env:
  DRY_RUN: ${{ inputs.dry_run }}

jobs:
  debPackagex64:
    name: Build DEB package
    strategy:
      matrix:
        ubuntuName: [focal, jammy, noble]
        arch: [x64]
        isDotnet9:
          - ${{ inputs.dotnet_major_version == 9 }}
        exclude:
          - isDotnet9: true
            ubuntuName: focal
      fail-fast: false
    runs-on: ubuntu-latest
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/checkout@v4
        with:
          path: current

      - uses: actions/checkout@v4
        with:
          repository: '${{ inputs.github_repository }}'
          ref: "v${{ inputs.raven_major_minor }}"
          path: ravendb

      - name: Download tar package
        run: |
          case "${{ matrix.arch }}" in
            "arm32v7")
              downloadURL="https://daily-builds.s3.amazonaws.com/RavenDB-${{ inputs.version }}-raspberry-pi.tar.bz2"
              ;;
            "arm64v8")
              downloadURL="https://daily-builds.s3.amazonaws.com/RavenDB-${{ inputs.version }}-linux-arm64.tar.bz2"
              ;;

            "x64")
              downloadURL="https://daily-builds.s3.amazonaws.com/RavenDB-${{ inputs.version }}-linux-x64.tar.bz2"
              ;;
            *)
              echo "Unsupported architecture"
              exit 1
              ;;
          esac
          wget -P "temp" "$downloadURL"
        working-directory: ravendb/scripts/linux/pkg/deb

      - name: Extract build number
        run: |
          case "${{ matrix.arch }}" in
            "arm32v7")
              tarName="RavenDB-${{ inputs.version }}-raspberry-pi.tar.bz2"
              ;;
            "arm64v8")
              tarName="RavenDB-${{ inputs.version }}-linux-arm64.tar.bz2"
              ;;

            "x64")
              tarName="RavenDB-${{ inputs.version }}-linux-x64.tar.bz2"
              ;;
            *)
              echo "Unsupported architecture"
              exit 1
              ;;
          esac
          filePath="RavenDB/Server/Raven.Server.dll"
          tar -xvf $tarName $filePath
          sudo apt install -y libimage-exiftool-perl
          number=$(exiftool $filePath | egrep 'File Version[ ]+:' | cut -d. -f 4)
          echo "BUILD_NUMBER=$number" >> $GITHUB_ENV
        working-directory: ravendb/scripts/linux/pkg/deb/temp

      - name: Build deb package
        run: |
          chmod a+x *.sh
          case "${{ matrix.arch }}" in
            "arm32v7")
              arch="armhf"
              ;;
            "arm64v8")
              arch="arm64"
              ;;
            "x64")
              arch="amd64"
              ;;
            *)
              echo "Unsupported architecture"
              exit 1
              ;;
          esac
          source ./set-ubuntu-${{ matrix.ubuntuName }}.sh
          source ./set-raven-platform-${arch}.sh
          ./build-deb.sh
          echo "DEB_ARCH=$arch" >> $GITHUB_ENV
          echo "UBUNTU_VERSION=$DISTRO_VERSION" >> $GITHUB_ENV
        working-directory: ravendb/scripts/linux/pkg/deb
        env:
          RAVENDB_VERSION: ${{ inputs.version }}

      - name: Upload deb package to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.ubuntuName }}-${{ matrix.arch }}
          path: ravendb/scripts/linux/pkg/deb/dist/${{ env.UBUNTU_VERSION }}/ravendb*.deb

      - name: Upload deb package to s3
        run: |
          set -e
          set -x

          case "${{ matrix.arch }}" in
            "arm32v7")
              arch="arm32"
              ;;
            "arm64v8")
              arch="arm64"
              ;;
            "x64")
              arch="x64"
              ;;
            *)
              echo "Unsupported architecture"
              exit 1
              ;;
          esac

          PACKAGES_DIST_DIR=ravendb/scripts/linux/pkg/deb/dist

          if [ "${{ inputs.is_nightly }}" == "true" ]; then
            NIGHTLY_VERSION_DATE_PART=$(echo ${{ inputs.version }} | cut -d- -f3,4)
            export BUILD_VERSION="$NIGHTLY_VERSION_DATE_PART-Nightly"
          elif [ "${{ inputs.is_stable }}" == "true" ]; then
            export BUILD_VERSION="${{ env.BUILD_NUMBER }}"
          else
            buildType=$(echo ${{ inputs.version }} | cut -d- -f2)
            echo "TRIGGERING_BUILD_TYPE: $buildType"
            export BUILD_VERSION="${{ env.BUILD_NUMBER }}-${buildType}"
          fi

          export COMMENT="RavenDB_${RAVENDB_VERSION}_DEB"
          export S3UPLOADER="./current/s3uploader.sh"

          "$S3UPLOADER" \
            --category "RavenDB for Ubuntu ${{ env.UBUNTU_VERSION }} ${arch} DEB" \
            --filename "${PACKAGES_DIST_DIR}/${{ env.UBUNTU_VERSION }}/ravendb_${RAVENDB_VERSION}-0_ubuntu.${{ env.UBUNTU_VERSION }}_${{ env.DEB_ARCH }}.deb"
        env:
          RAVENDB_VERSION: ${{ inputs.version }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          SECRET_PASS: ${{ secrets.SECRET_PASS }}


  debPackagesArm:
    name: Build DEB package
    strategy:
      matrix:
        ubuntuName: [focal, jammy, noble]
        arch: [arm32v7, arm64v8]
        isDotnet9:
          - ${{ inputs.dotnet_major_version == 9 }}
        exclude:
          - isDotnet9: true
            ubuntuName: focal
          - arch: [ x64, arm32v7 ]
      fail-fast: false
    runs-on: ubuntu-24.04-arm
    steps:
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/checkout@v4
        with:
          path: current

      - uses: actions/checkout@v4
        with:
          repository: '${{ inputs.github_repository }}'
          ref: "v${{ inputs.raven_major_minor }}"
          path: ravendb

      - name: Download tar package
        run: |
          case "${{ matrix.arch }}" in
            "arm32v7")
              downloadURL="https://daily-builds.s3.amazonaws.com/RavenDB-${{ inputs.version }}-raspberry-pi.tar.bz2"
              ;;
            "arm64v8")
              downloadURL="https://daily-builds.s3.amazonaws.com/RavenDB-${{ inputs.version }}-linux-arm64.tar.bz2"
              ;;

            "x64")
              downloadURL="https://daily-builds.s3.amazonaws.com/RavenDB-${{ inputs.version }}-linux-x64.tar.bz2"
              ;;
            *)
              echo "Unsupported architecture"
              exit 1
              ;;
          esac
          wget -P "temp" "$downloadURL"
        working-directory: ravendb/scripts/linux/pkg/deb

      - name: Extract build number
        run: |
          case "${{ matrix.arch }}" in
            "arm32v7")
              tarName="RavenDB-${{ inputs.version }}-raspberry-pi.tar.bz2"
              ;;
            "arm64v8")
              tarName="RavenDB-${{ inputs.version }}-linux-arm64.tar.bz2"
              ;;

            "x64")
              tarName="RavenDB-${{ inputs.version }}-linux-x64.tar.bz2"
              ;;
            *)
              echo "Unsupported architecture"
              exit 1
              ;;
          esac
          filePath="RavenDB/Server/Raven.Server.dll"
          tar -xvf $tarName $filePath
          sudo apt install -y libimage-exiftool-perl
          number=$(exiftool $filePath | egrep 'File Version[ ]+:' | cut -d. -f 4)
          echo "BUILD_NUMBER=$number" >> $GITHUB_ENV
        working-directory: ravendb/scripts/linux/pkg/deb/temp

      - name: Build deb package
        run: |
          chmod a+x *.sh
          case "${{ matrix.arch }}" in
            "arm32v7")
              arch="armhf"
              ;;
            "arm64v8")
              arch="arm64"
              ;;
            "x64")
              arch="amd64"
              ;;
            *)
              echo "Unsupported architecture"
              exit 1
              ;;
          esac
          source ./set-ubuntu-${{ matrix.ubuntuName }}.sh
          source ./set-raven-platform-${arch}-native.sh
          ./build-deb.sh
          echo "DEB_ARCH=$arch" >> $GITHUB_ENV
          echo "UBUNTU_VERSION=$DISTRO_VERSION" >> $GITHUB_ENV
        working-directory: ravendb/scripts/linux/pkg/deb
        env:
          RAVENDB_VERSION: ${{ inputs.version }}

      - name: Upload deb package to artifacts
        uses: actions/upload-artifact@v4
        with:
          name: package-${{ matrix.ubuntuName }}-${{ matrix.arch }}
          path: ravendb/scripts/linux/pkg/deb/dist/${{ env.UBUNTU_VERSION }}/ravendb*.deb

      - name: Upload deb package to s3
        run: |
          set -e
          set -x

          case "${{ matrix.arch }}" in
            "arm32v7")
              arch="arm32"
              ;;
            "arm64v8")
              arch="arm64"
              ;;
            "x64")
              arch="x64"
              ;;
            *)
              echo "Unsupported architecture"
              exit 1
              ;;
          esac

          PACKAGES_DIST_DIR=ravendb/scripts/linux/pkg/deb/dist

          if [ "${{ inputs.is_nightly }}" == "true" ]; then
            NIGHTLY_VERSION_DATE_PART=$(echo ${{ inputs.version }} | cut -d- -f3,4)
            export BUILD_VERSION="$NIGHTLY_VERSION_DATE_PART-Nightly"
          elif [ "${{ inputs.is_stable }}" == "true" ]; then
            export BUILD_VERSION="${{ env.BUILD_NUMBER }}"
          else
            buildType=$(echo ${{ inputs.version }} | cut -d- -f2)
            echo "TRIGGERING_BUILD_TYPE: $buildType"
            export BUILD_VERSION="${{ env.BUILD_NUMBER }}-${buildType}"
          fi

          export COMMENT="RavenDB_${RAVENDB_VERSION}_DEB"
          export S3UPLOADER="./current/s3uploader.sh"

          "$S3UPLOADER" \
            --category "RavenDB for Ubuntu ${{ env.UBUNTU_VERSION }} ${arch} DEB" \
            --filename "${PACKAGES_DIST_DIR}/${{ env.UBUNTU_VERSION }}/ravendb_${RAVENDB_VERSION}-0_ubuntu.${{ env.UBUNTU_VERSION }}_${{ env.DEB_ARCH }}.deb"
        env:
          RAVENDB_VERSION: ${{ inputs.version }}
          BUCKET_NAME: ${{ secrets.BUCKET_NAME }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          SECRET_PASS: ${{ secrets.SECRET_PASS }}
